{"version":3,"sources":["features/currentTodo.ts","features/filter.ts","features/todos.ts","app/store.ts","app/hooks.ts","components/TodoList/TodoList.tsx","components/TodoFilter/TodoFilter.tsx","components/Loader/Loader.tsx","api.ts","components/TodoModal/TodoModal.tsx","App.tsx","index.tsx"],"names":["actions","todo","type","payload","currentTodoReducer","state","action","query","status","initialState","filterReducer","todos","todosReducer","rootReducer","combineReducers","currentTodo","filter","store","createStore","composeWithDevTools","applyMiddleware","thunk","useAppDispatch","useDispatch","useAppSelector","useSelector","TodoList","dispatch","className","map","id","title","completed","isActive","classNames","onClick","currentTodoActions","TodoFilter","onChange","event","filterActions","target","value","placeholder","style","pointerEvents","Loader","get","url","delay","fullURL","Promise","resolve","setTimeout","then","fetch","res","json","TodoModal","onClose","useState","user","setUser","userId","useEffect","getUser","person","href","email","name","App","isLoading","setIsLoading","isError","setIsError","getTodosFromServer","a","todosFromServer","todosActions","visibleTodos","filtered","toLowerCase","includes","getVisibleTodos","Root","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.907c6a1d.chunk.js","sourcesContent":["import { Todo } from '../types/Todo';\n\n// we use string literal as a type to avoid mistype in future\ntype RemoveTodoAction = { type: 'currentTodo/REMOVE' };\n\n// payload is a typical name for an action data\ntype SetTodoAction = {\n  type: 'currentTodo/SET';\n  payload: Todo;\n};\n\n// Action creator return type protect us from a mistype\nconst removeTodo = (): RemoveTodoAction => ({ type: 'currentTodo/REMOVE' });\n\nconst setTodo = (todo: Todo): SetTodoAction => ({\n  type: 'currentTodo/SET',\n  payload: todo,\n});\n\n// These actions will be used in the application\nexport const actions = { setTodo, removeTodo };\n\ntype State = Todo | null;\ntype Action = SetTodoAction | RemoveTodoAction;\n\nconst currentTodoReducer = (\n  state: State = null,\n  action: Action,\n): State => {\n  switch (action.type) {\n    case 'currentTodo/SET':\n      return action.payload;\n\n    case 'currentTodo/REMOVE':\n      return null;\n\n    default:\n      return state;\n  }\n};\n\nexport default currentTodoReducer;\n","import { Status } from '../types/Status';\n\ntype ChangeQueryAction = {\n  type: 'query/CHANGE',\n  payload: string,\n};\n\nconst changeQuery = (query: string): ChangeQueryAction => ({\n  type: 'query/CHANGE',\n  payload: query,\n});\n\ntype ChangeStatusAction = {\n  type: 'status/CHANGE',\n  payload: Status,\n};\n\nconst changeStatus = (status: Status): ChangeStatusAction => ({\n  type: 'status/CHANGE',\n  payload: status,\n});\n\nexport const actions = { changeQuery, changeStatus };\n\ntype Action = ChangeQueryAction | ChangeStatusAction;\ntype State = {\n  query: string,\n  status: Status,\n};\n\nconst initialState: State = {\n  query: '',\n  status: 'all',\n};\n\nconst filterReducer = (state: State = initialState, action: Action) => {\n  switch (action.type) {\n    case 'query/CHANGE':\n      return { ...state, query: action.payload };\n\n    case 'status/CHANGE':\n      return { ...state, status: action.payload };\n\n    default:\n      return state;\n  }\n};\n\nexport default filterReducer;\n","import { Todo } from '../types/Todo';\n\ntype SetAction = {\n  type: 'todos/SET',\n  payload: Todo[],\n};\n\nconst set = (todos: Todo[]): SetAction => ({\n  type: 'todos/SET',\n  payload: todos,\n});\n\nexport const actions = { set };\n\ntype State = Todo[];\n\nconst todosReducer = (state: State = [], action: SetAction): Todo[] => {\n  switch (action.type) {\n    case 'todos/SET':\n      return action.payload;\n\n    default:\n      return state;\n  }\n};\n\nexport default todosReducer;\n","import { createStore, applyMiddleware, combineReducers } from 'redux';\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport thunk from 'redux-thunk';\n\nimport currentTodoReducer from '../features/currentTodo';\nimport filterReducer from '../features/filter';\nimport todosReducer from '../features/todos';\n\nconst rootReducer = combineReducers({\n  currentTodo: currentTodoReducer,\n  filter: filterReducer,\n  todos: todosReducer,\n});\n\n// The `store` is passed to the Provider in `/src/index.tsx`\nexport const store = createStore(\n  rootReducer,\n  composeWithDevTools(\n    applyMiddleware(thunk),\n  ),\n);\n\nexport type RootState = ReturnType<typeof store.getState>;\nexport type AppDispatch = typeof store.dispatch;\n","import { TypedUseSelectorHook, useDispatch, useSelector } from 'react-redux';\nimport { AppDispatch, RootState } from './store';\n\nexport const useAppDispatch: () => AppDispatch = useDispatch;\nexport const useAppSelector: TypedUseSelectorHook<RootState> = useSelector;\n","import React from 'react';\nimport { useDispatch } from 'react-redux';\nimport classNames from 'classnames';\nimport { Todo } from '../../types/Todo';\nimport { useAppSelector } from '../../app/hooks';\n\nimport { actions as currentTodoActions } from '../../features/currentTodo';\n\ntype Props = {\n  todos: Todo[];\n};\n\nexport const TodoList: React.FC<Props> = ({\n  todos,\n}) => {\n  const dispatch = useDispatch();\n  const currentTodo = useAppSelector(state => state.currentTodo);\n\n  return (\n    <table className=\"table is-hoverable is-striped m-3\">\n      <thead>\n        <tr>\n          <th className=\"is-info\">#</th>\n          <th className=\"is-info\">\n            <span className=\"icon\">\n              <i className=\"fas fa-check\" />\n            </span>\n          </th>\n          <th className=\"is-info\">Title</th>\n          <th className=\"is-info\"> </th>\n        </tr>\n      </thead>\n\n      <tbody>\n        {todos.map(todo => {\n          const {\n            id,\n            title,\n            completed,\n          } = todo;\n          const isActive = todo === currentTodo;\n\n          return (\n            <tr\n              key={id}\n              data-cy=\"todo\"\n              className={classNames({\n                'has-background-info-light': isActive,\n              })}\n            >\n              <td className=\"is-vcentered\">\n                {id}\n              </td>\n              <td className=\"is-vcentered\">\n                {completed && (\n                  <span className=\"icon\" data-cy=\"iconCompleted\">\n                    <i className=\"fas fa-check\" />\n                  </span>\n                )}\n              </td>\n              <td className=\"is-vcentered is-expanded\">\n                <p\n                  className={completed\n                    ? 'has-text-success'\n                    : 'has-text-danger'}\n                >\n                  {title}\n                </p>\n              </td>\n              <td className=\"has-text-right is-vcentered\">\n                <button\n                  data-cy=\"selectButton\"\n                  className=\"button\"\n                  type=\"button\"\n                  onClick={() => dispatch(currentTodoActions.setTodo(todo))}\n                >\n                  <span className=\"icon\">\n                    <i className={classNames(\n                      'far',\n                      { 'fa-eye-slash': isActive },\n                      { 'fa-eye': !isActive },\n                    )}\n                    />\n                  </span>\n                </button>\n              </td>\n            </tr>\n          );\n        })}\n      </tbody>\n    </table>\n  );\n};\n","import React from 'react';\nimport { useAppDispatch, useAppSelector } from '../../app/hooks';\nimport { actions as filterActions } from '../../features/filter';\nimport { Status } from '../../types/Status';\n\nexport const TodoFilter: React.FC = () => {\n  const dispatch = useAppDispatch();\n  const { query } = useAppSelector(state => state.filter);\n\n  const handleSelectChange = (event: React.ChangeEvent<HTMLSelectElement>) => {\n    dispatch(filterActions.changeStatus(event.target.value as Status));\n  };\n\n  return (\n    <form className=\"field has-addons\">\n      <p className=\"control\">\n        <span className=\"select is-black\">\n          <select\n            data-cy=\"statusSelect\"\n            onChange={handleSelectChange}\n          >\n            <option value=\"all\">All</option>\n            <option value=\"active\">Active</option>\n            <option value=\"completed\">Completed</option>\n          </select>\n        </span>\n      </p>\n\n      <p className=\"control is-expanded has-icons-left has-icons-right\">\n        <input\n          data-cy=\"searchInput\"\n          type=\"text\"\n          className=\"input is-black\"\n          placeholder=\"Search...\"\n          value={query}\n          onChange={(event) => (\n            dispatch(filterActions.changeQuery(event.target.value))\n          )}\n        />\n        <span className=\"icon is-left\">\n          <i className=\"fas fa-magnifying-glass\" />\n        </span>\n\n        {query && (\n          <span className=\"icon is-right\" style={{ pointerEvents: 'all' }}>\n            {/* eslint-disable-next-line jsx-a11y/control-has-associated-label */}\n            <button\n              data-cy=\"clearSearchButton\"\n              type=\"button\"\n              className=\"delete\"\n              onClick={() => dispatch(filterActions.changeQuery(''))}\n            />\n          </span>\n        )}\n      </p>\n    </form>\n  );\n};\n","import React from 'react';\nimport './Loader.scss';\n\nexport const Loader: React.FC = () => (\n  <div className=\"Loader\" data-cy=\"loader\">\n    <div className=\"Loader__content\" />\n  </div>\n);\n","import { Todo } from './types/Todo';\nimport { User } from './types/User';\n\n// eslint-disable-next-line max-len\nconst BASE_URL = 'https://mate-academy.github.io/react_dynamic-list-of-todos/api';\n\nfunction wait(delay: number): Promise<void> {\n  return new Promise(resolve => {\n    setTimeout(resolve, delay);\n  });\n}\n\nfunction get<T>(url: string): Promise<T> {\n  // eslint-disable-next-line prefer-template\n  const fullURL = BASE_URL + url + '.json';\n\n  return wait(300)\n    .then(() => fetch(fullURL))\n    .then(res => res.json());\n}\n\nexport const getTodos = () => get<Todo[]>('/todos');\n\nexport const getUser = (userId: number) => get<User>(`/users/${userId}`);\n","import React, { useState, useEffect } from 'react';\nimport classNames from 'classnames';\nimport { Loader } from '../Loader';\nimport { getUser } from '../../api';\n\nimport { User } from '../../types/User';\nimport { Todo } from '../../types/Todo';\n\ntype Props = {\n  todo: Todo,\n  onClose: () => void;\n};\n\nexport const TodoModal: React.FC<Props> = ({ todo, onClose }) => {\n  const [user, setUser] = useState<User>();\n\n  const {\n    id,\n    completed,\n    title,\n    userId,\n  } = todo;\n\n  useEffect(() => {\n    getUser(userId)\n      .then(person => setUser(person));\n  }, []);\n\n  return (\n    <div className=\"modal is-active\" data-cy=\"modal\">\n      <div className=\"modal-background\" />\n\n      {!user ? (\n        <Loader />\n      ) : (\n        <div className={classNames(\n          'modal-card',\n          'notification',\n          {\n            'is-success': completed,\n            'is-danger': !completed,\n          },\n        )}\n        >\n          <header className=\"modal-card-head\">\n            <div\n              className=\"modal-card-title has-text-weight-medium\"\n              data-cy=\"modal-header\"\n            >\n              {`Todo #${id}`}\n            </div>\n\n            {/* eslint-disable-next-line jsx-a11y/control-has-associated-label */}\n            <button\n              type=\"button\"\n              className=\"delete\"\n              data-cy=\"modal-close\"\n              onClick={onClose}\n            />\n          </header>\n\n          <div className=\"modal-card-body\">\n            <p className=\"block has-text-dark\" data-cy=\"modal-title\">\n              {title}\n            </p>\n\n            <p className=\"block has-text-dark\" data-cy=\"modal-user\">\n              {completed\n                ? <strong className=\"has-text-success\">Done</strong>\n                : <strong className=\"has-text-danger\">Planned</strong>}\n\n              {' by '}\n\n              <a href={`mailto:${user.email}`}>\n                {user.name}\n              </a>\n            </p>\n          </div>\n        </div>\n      )}\n    </div>\n  );\n};\n","/* eslint-disable max-len */\nimport React, { useEffect, useState } from 'react';\nimport 'bulma/css/bulma.css';\nimport '@fortawesome/fontawesome-free/css/all.css';\nimport { TodoList } from './components/TodoList';\nimport { TodoFilter } from './components/TodoFilter';\nimport { TodoModal } from './components/TodoModal';\nimport { Loader } from './components/Loader';\nimport { Todo } from './types/Todo';\nimport { getTodos } from './api';\n\nimport { actions as currentTodoActions } from './features/currentTodo';\nimport { useAppSelector, useAppDispatch } from './app/hooks';\nimport { actions as todosActions } from './features/todos';\nimport { Status } from './types/Status';\n\nconst getVisibleTodos = (\n  todos: Todo[],\n  filter: { query: string, status: Status },\n): Todo[] => {\n  const { query, status } = filter;\n  let filtered = [...todos];\n\n  switch (status) {\n    case 'active':\n      filtered = filtered.filter(todo => !todo.completed);\n      break;\n\n    case 'completed':\n      filtered = filtered.filter(todo => todo.completed);\n      break;\n\n    default:\n      break;\n  }\n\n  return filtered.filter(todo => (\n    todo.title.toLowerCase().includes(query.toLowerCase())\n  ));\n};\n\nexport const App: React.FC = () => {\n  const [isLoading, setIsLoading] = useState(true);\n  const [isError, setIsError] = useState(false);\n\n  const dispatch = useAppDispatch();\n  const currentTodo = useAppSelector(state => state.currentTodo);\n  const todos = useAppSelector(state => state.todos);\n  const filter = useAppSelector(state => state.filter);\n\n  useEffect(() => {\n    const getTodosFromServer = async () => {\n      try {\n        const todosFromServer = await getTodos();\n\n        dispatch(todosActions.set(todosFromServer));\n      } catch {\n        setIsError(true);\n      } finally {\n        setIsLoading(false);\n      }\n    };\n\n    getTodosFromServer();\n  }, []);\n\n  const visibleTodos = getVisibleTodos(todos, filter);\n\n  return (\n    <>\n      <div className=\"columns is-flex is-justify-content-center\">\n        <div className=\"column is-two-thirds m-6\">\n          <div className=\"panel is-info\">\n            <h1 className=\"title panel-heading\">Todos:</h1>\n\n            <div className=\"panel-block is-flex is-justify-content-center\">\n              <TodoFilter />\n            </div>\n\n            <div className=\"panel-block is-flex is-justify-content-center\">\n              {!isLoading\n                ? (\n                  <TodoList\n                    todos={visibleTodos}\n                  />\n                )\n                : <Loader />}\n            </div>\n            {isError && (\n              <p>Something went wrong...</p>\n            )}\n          </div>\n        </div>\n      </div>\n\n      {currentTodo && (\n        <TodoModal todo={currentTodo} onClose={() => dispatch(currentTodoActions.removeTodo())} />\n      )}\n    </>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { HashRouter as Router } from 'react-router-dom';\n\nimport { store } from './app/store';\nimport { App } from './App';\n\n// Just a convenient component with all the wrappers for the `App`\n// The Router component (if you use it) should be placed inside the Provider\nconst Root = () => (\n  <Provider store={store}>\n    <Router>\n      <App />\n    </Router>\n  </Provider>\n);\n\nReactDOM.render(<Root />, document.getElementById('root'));\n"],"sourceRoot":""}